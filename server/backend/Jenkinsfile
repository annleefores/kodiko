def runEntirePipeline = true

pipeline {
  agent {
    kubernetes {
      yaml '''
        apiVersion: v1
        kind: Pod
        spec:
          containers:
          - name: sonarqube
            image: annleefores/jenkins-sonarqube
            command:
            - sleep
            args:
            - 99d
          - name: kaniko
            image: gcr.io/kaniko-project/executor:debug
            command:
            - sleep
            args:
            - 99d
            tty: true
            volumeMounts:
            - name: jenkins-docker-cfg
              mountPath: /kaniko/.docker
          volumes:
          - name: jenkins-docker-cfg
            projected:
              sources:
              - secret:
                  name: dockercred
                  items:
                    - key: .dockerconfigjson
                      path: config.json

              '''
    }
  }

  stages {
    stage('Check for changes') {
      steps {
        script {
          // list file changes in server/backend folder
          def changedFiles = sh(script: 'git diff --name-only HEAD^ HEAD -- server/backend', returnStdout: true).trim().split('\n').findAll { it.trim() }

          println('Changed files: ' + changedFiles)

          if (changedFiles.size() == 0) {
            runEntirePipeline = false
      } else {
            println('File changes in server/backend')
          }
        }
      }
    }

    stage('sonarqube') {
      when {
        expression {
          runEntirePipeline
        }
      }
      steps {
        container('sonarqube') {
            withSonarQubeEnv(installationName: 'sq1') {
            sh "/home/sonar-scanner-cli/bin/sonar-scanner -Dsonar.projectKey=kodiko-backend -Dsonar.sources=server/backend -Dsonar.host.url=${env.SONAR_HOST_URL} -Dsonar.login=${env.SONAR_AUTH_TOKEN}"
            }
        }
      }
    }

    stage('quality gate') {
      when {
        expression {
          runEntirePipeline
        }
      }
      steps {
        timeout(time: 6, unit: 'MINUTES') {
            waitForQualityGate abortPipeline: true
        }
      }
    }

    stage('get tag') {
      when {
        expression {
          runEntirePipeline
        }
      }
      steps {
        script {
          def backendVersion = sh(script: "git tag -l 'kodiko-backend-*' --sort='-version:refname' | head -n1 | awk -F'-' '{print \$3}'", returnStdout: true).trim()
          echo "Current tag: ${backendVersion}"

          // Set the version as an environment variable
          env.VERSION = backendVersion
        }
      }
    }

    stage('build and push') {
      when {
        expression {
          runEntirePipeline
        }
      }
      environment {
        DOCKER_IMAGE = "annleefores/kodiko-backend:${VERSION}"
      }
      steps {
        container('kaniko') {
          sh "/kaniko/executor --context ${env.WORKSPACE}/server/backend --destination ${env.DOCKER_IMAGE}"
        }
      }
    }
  }
}
